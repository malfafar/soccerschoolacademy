# {{ ansible_managed }}

upstream unicorn {
  server unix:{{ unicorn_sock_path }} fail_timeout=0;
}

{% if letsencrypt_cert_domains_alternative|length %}
  server {
    listen 443 ssl;
    server_name {% for domain in letsencrypt_cert_domains_alternative %}{{ domain }} {% endfor %};

    ssl_certificate /etc/letsencrypt/live/{{ letsencrypt_cert_domains[0] }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ letsencrypt_cert_domains[0] }}/privkey.pem;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';

    return 301 https://{{ letsencrypt_cert_domains[0] }}$request_uri;

  }
{% else %}

{% endif %}

server {
  listen 443 ssl;
  server_name {% for domain in letsencrypt_cert_domains %}{{ domain }} {% endfor %};

  ssl_certificate /etc/letsencrypt/live/{{ letsencrypt_cert_domains[0] }}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/{{ letsencrypt_cert_domains[0] }}/privkey.pem;

  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';

  root {{ app_public_path }};

  location ^~ /assets/ {
    gzip_static on;
    expires max;
    add_header Cache-Control public;
  }

  location ~ ^/(robots.txt|sitemap.xml.gz)/ {
    root {{ app_public_path }};
  }

  try_files $uri/index.html $uri @unicorn;
  location @unicorn {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_set_header   X-Forwarded-Proto    $scheme;
    proxy_redirect off;
    proxy_pass http://unicorn;
  }

  error_page 500 502 503 504 /500.html;
  client_max_body_size 4G;
  keepalive_timeout 10;
}

server {
  listen 80;
  server_name {% for domain in (letsencrypt_cert_domains | union(letsencrypt_cert_domains_alternative)) %}{{ domain }} {% endfor %};
  return 301 https://{{ letsencrypt_cert_domains[0] }}$request_uri;
}
