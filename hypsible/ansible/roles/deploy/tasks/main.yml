---
# - include_vars: ../../unicorn/defaults/main.yml

- set_fact: this_release_path="{{ releases_path }}/{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"

- debug: msg='New release path {{ this_release_path }}'

- name: Create new release dir
  file: path={{ this_release_path }} state=directory

- name: Update code
  git: repo={{ git_url }} dest={{ this_release_path }} version={{ git_branch }} accept_hostkey=yes
  register: git

- debug: msg='Updated repo from {{ git.before }} to {{ git.after }}'

- name: Delete log directory
  file: path={{ this_release_path }}/log state=absent

- name: Create secrets
  template: src=secrets.j2 dest={{ shared_path }}/config/secrets.yml

- name: Symlink shared files
  file: src={{ shared_path }}/{{ item }} dest={{ this_release_path }}/{{ item }} state=link force=yes
  with_items:
    - config/database.yml
    - config/secrets.yml
    - config/unicorn.rb
    - log
    - tmp
    - vendor/bundle
    - public/system
    - public/uploads

# --path /home/rails/shared/bundle --without development test --deployment --quiet
# command: 'bundle install --deployment'
- name: Install bundle
  command: 'bundle install --without development test'
  environment:
    RAILS_ENV: '{{ rails_env }}'
  args:
    chdir: '{{ this_release_path }}'

# - name: Build Paperclip missing styles
#   command: bundle exec rake paperclip:refresh:missing_styles chdir={{ this_release_path }}

- name: Precompile assets
  command: bundle exec rake assets:precompile chdir={{ this_release_path }} group={{ group_name }} mode=0775
  environment:
    RAILS_ENV: '{{ rails_env }}'

- name: Migrate database
  command: bundle exec rake db:migrate chdir={{ this_release_path }}
  environment:
    RAILS_ENV: '{{ rails_env }}'

# - name: Create and migrate DB
#   command: /bin/bash -l -c 'rake db:create db:migrate' chdir={{ this_release_path }}
#   become: true
#   become_user: '{{ env_db_user }}'
#   ignore_errors: yes

- name: Symlink new release
  file: src={{ this_release_path }} dest={{ app_path }} state=link force=yes

# - name: Ensure unicorn is started
#   action: service name=unicorn state=started

- name: Restart unicorn
  become: true
  become_method: sudo
  command: service unicorn restart


# - name: Restart unicorn
#   command: sudo {{ server_restart_command }}

- name: Cleanup
  shell: "ls -1t {{ releases_path }}|tail -n +{{ keep_releases + 1 }}|xargs rm -rf"
  args:
    chdir: '{{ releases_path }}'
