require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe MatchesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Match. As you add validations to Match, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      matchday: Faker::Number.number(1),
      home_goals: Faker::Number.number(1),
      away_goals: Faker::Number.number(1),
      delegate1: Faker::Name.name,
      delegate2: Faker::Name.name,
      referee1: Faker::Name.name,
      referee2: Faker::Name.name,
      referee3: Faker::Name.name,
      home_observations: Faker::Hipster.sentence,
      away_observations: Faker::Hipster.sentence,
      ref_observations: Faker::Hipster.sentence,
      match_date: Faker::Date.backward(365),
      competition_id: 1
    }
  }

  let(:invalid_attributes) {
    {
      matchday: Faker::Number.number(1),
      home_goals: nil,
      away_goals: nil,
      delegate1: Faker::Name.name,
      delegate2: Faker::Name.name,
      referee1: Faker::Name.name,
      referee2: Faker::Name.name,
      referee3: Faker::Name.name,
      home_observations: Faker::Hipster.sentence,
      away_observations: Faker::Hipster.sentence,
      ref_observations: Faker::Hipster.sentence,
      match_date: Faker::Date.backward(365),
      competition_id: 1
    }
  }

  let(:home_team_season){
    home = Team.create!(name: "Home")
    john = Player.create(name: "John", phone: "910000000", birthday: Faker::Time.backward(), zipcode: "5555-444")
    paul = Player.create(name: "Paul", phone: "910000000", birthday: Faker::Time.backward(), zipcode: "5555-444")
    season = Season.create(start_year: 2015, end_year: 2016)

    john_season = PlayerSeason.new
    john_season.player = john
    john_season.save

    paul_season = PlayerSeason.new
    paul_season.player_id = paul.id
    paul_season.save

    home_season = TeamSeason.new

    home_season.player_seasons << john_season
    home_season.player_seasons << paul_season


    home_season.team_id = home.id
    home_season.season_id = season.id
    home_season.save

    return home_season
  }

  subject(:away_team_season){
    away = Team.create!(name: "Away")

    daniel = Player.create(name: "Daniel", phone: "910000000", birthday: Faker::Time.backward(), zipcode: "5555-444")
    michael = Player.create(name: "Michael", phone: "910000000", birthday: Faker::Time.backward(), zipcode: "5555-444")
    season = Season.create(start_year: 2015, end_year: 2016)


    daniel_season = PlayerSeason.new
    daniel_season.player = daniel
    daniel_season.save

    michael_season = PlayerSeason.new
    michael_season.player = michael
    michael_season.save



    away_season = TeamSeason.new
    away_season.player_seasons << daniel_season
    away_season.player_seasons << michael_season
    away_season.team = away
    away_season.season = season
    away_season.save

    return away_season
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # MatchesController. Be sure to keep this updated too.

  describe "GET #index" do
    login_coach

    it "assigns all matches as @matches" do
      valid_attributes[:home_team_id] = home_team_season.id
      valid_attributes[:away_team_id] = away_team_season.id

      match = Match.create! valid_attributes
      get :index, {}
      expect(assigns(:matches)).to eq([match])
    end
  end

  describe "GET #show" do

    login_coach

    it "assigns the requested match as @match" do

      valid_attributes[:home_team_id] = home_team_season.id
      valid_attributes[:away_team_id] = away_team_season.id

      match = Match.create! valid_attributes
      get :show, {:id => match.to_param}
      expect(assigns(:match)).to eq(match)
    end
  end

  describe "GET #new" do

    login_coach

    it "assigns a new match as @match" do
      get :new, {}
      expect(assigns(:match)).to be_a_new(Match)
    end
  end

  describe "GET #edit" do

    login_coach

    it "assigns the requested match as @match" do

      valid_attributes[:home_team_id] = home_team_season.id
      valid_attributes[:away_team_id] = away_team_season.id

      match = Match.create! valid_attributes
      get :edit, {:id => match.to_param}
      expect(assigns(:match)).to eq(match)
    end
  end

  describe "POST #create" do
    login_coach
    context "with valid params" do
      it "creates a new Match" do
        valid_attributes[:home_team_id] = home_team_season.id
        valid_attributes[:away_team_id] = away_team_season.id

        expect {
          post :create, {:match => valid_attributes }
        }.to change(Match, :count).by(1)
      end

      it "assigns a newly created match as @match" do
        valid_attributes[:home_team_id] = home_team_season.id
        valid_attributes[:away_team_id] = away_team_season.id

        post :create, {:match => valid_attributes}
        expect(assigns(:match)).to be_a(Match)
        expect(assigns(:match)).to be_persisted
      end

      it "redirects to the created match" do
        valid_attributes[:home_team_id] = home_team_season.id
        valid_attributes[:away_team_id] = away_team_season.id

        post :create, {:match => valid_attributes}
        expect(response).to redirect_to(Match.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved match as @match" do
        valid_attributes[:home_team_id] = home_team_season.id
        valid_attributes[:away_team_id] = away_team_season.id

        post :create, {:match => invalid_attributes}
        expect(assigns(:match)).to be_a_new(Match)
      end

      it "re-renders the 'new' template" do
        valid_attributes[:home_team_id] = home_team_season.id
        valid_attributes[:away_team_id] = away_team_season.id

        post :create, {:match => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    login_coach




    context "with valid params" do
      let(:new_attributes) {
        {
          matchday: Faker::Number.number(1),
          home_goals: Faker::Number.number(1),
          away_goals: Faker::Number.number(1),
          delegate1: Faker::Name.name,
          delegate2: Faker::Name.name,
          referee1: Faker::Name.name,
          referee2: Faker::Name.name,
          referee3: Faker::Name.name,
          home_observations: Faker::Hipster.sentence,
          away_observations: Faker::Hipster.sentence,
          ref_observations: Faker::Hipster.sentence,
          match_date: Faker::Date.backward(365),
          competition_id: 1
        }
      }

      it "updates the requested match" do

        home_team_season.coaches << controller.current_coach
        home_team_season.save

        valid_attributes[:home_team_id] = home_team_season.id

        away_team_season.coaches << controller.current_coach
        away_team_season.save

        valid_attributes[:away_team_id] = away_team_season.id

        match = Match.create! valid_attributes

        home_team_season.players.each do |player|
          Statistic.create(player_id: player.id, match_id: match.id, goals: 3, state: 4)
        end

        away_team_season.players.each do |player|
          Statistic.create(player_id: player.id, match_id: match.id, goals: 2, state: 4)
        end

        new_attributes[:home_team_id] = home_team_season.id
        new_attributes[:away_team_id] = away_team_season.id

        put :update, {:id => match.to_param, :match => new_attributes}
        match.reload
        expect(match.referee1).to eq(new_attributes[:referee1])
      end

      it "assigns the requested match as @match" do

        home_team_season.coaches << controller.current_coach
        home_team_season.save

        valid_attributes[:home_team_id] = home_team_season.id

        away_team_season.coaches << controller.current_coach
        away_team_season.save

        valid_attributes[:away_team_id] = away_team_season.id

        match = Match.create! valid_attributes

        home_team_season.players.each do |player|
          Statistic.create(player_id: player.id, match_id: match.id, goals: 3, state: 4)
        end

        away_team_season.players.each do |player|
          Statistic.create(player_id: player.id, match_id: match.id, goals: 2, state: 4)
        end

        put :update, {:id => match.to_param, :match => valid_attributes}
        expect(assigns(:match)).to eq(match)
      end

      it "redirects to the match" do
        home_team_season.coaches << controller.current_coach
        home_team_season.save
        valid_attributes[:home_team_id] = home_team_season.id
        away_team_season.coaches << controller.current_coach
        away_team_season.save
        valid_attributes[:away_team_id] = away_team_season.id
        match = Match.create! valid_attributes

        home_team_season.players.each do |player|
          Statistic.create!(player_id: player.id, match_id: match.id, goals: 3, state: 4)
        end
        away_team_season.players.each do |player|
          Statistic.create!(player_id: player.id, match_id: match.id, goals: 2, state: 4)
        end

        put :update, {:id => match.to_param, :match => valid_attributes}
        expect(response).to redirect_to(match)
      end
    end

    context "with invalid params" do
      it "assigns the match as @match" do
        home_team_season.coaches << controller.current_coach
        home_team_season.save

        valid_attributes[:home_team_id] = home_team_season.id

        away_team_season.coaches << controller.current_coach
        away_team_season.save

        valid_attributes[:away_team_id] = away_team_season.id

        match = Match.create! valid_attributes

        put :update, {:id => match.to_param, :match => invalid_attributes}
        expect(assigns(:match)).to eq(match)
      end

      it "re-renders the 'edit' template" do

        home_team_season.coaches << controller.current_coach
        home_team_season.save

        valid_attributes[:home_team_id] = home_team_season.id

        away_team_season.coaches << controller.current_coach
        away_team_season.save

        valid_attributes[:away_team_id] = away_team_season.id


        match = Match.create! valid_attributes

        put :update, {:id => match.to_param, :match => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    login_coach
    it "destroys the requested match" do
      valid_attributes[:home_team_id] = home_team_season.id
      valid_attributes[:away_team_id] = away_team_season.id

      match = Match.create! valid_attributes
      expect {
        delete :destroy, {:id => match.to_param}
      }.to change(Match, :count).by(-1)
    end

    it "redirects to the matches list" do
      valid_attributes[:home_team_id] = home_team_season.id
      valid_attributes[:away_team_id] = away_team_season.id

      match = Match.create! valid_attributes
      delete :destroy, {:id => match.to_param}
      expect(response).to redirect_to(matches_url)
    end
  end

end
