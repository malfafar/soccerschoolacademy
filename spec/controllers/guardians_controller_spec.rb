require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
#Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe GuardiansController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Guardian. As you add validations to Guardian, be sure to
  # adjust the attributes here as well.
  let(:complete_attributes) {
    {
      name: Faker::Name.name,
      phone: "910000000",
      guardian_auth_attributes: {
        email: Faker::Internet.email
      }
    }
  }

  let(:guardian_attributes) {
    {
      name: Faker::Name.name,
      phone: "910000000"
    }
  }

  let(:invalid_attributes) {
    {
      name: Faker::Name.name,
      phone: "910001111111111111111110000"
    }
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # GuardiansController. Be sure to keep this updated too.

  describe "GET #index" do
    login_coach

    it "assigns all guardians as @guardians" do
      guardian = Guardian.create! complete_attributes
      get :index, {}
      expect(assigns(:guardians)).to eq([guardian])
    end
  end

  describe "GET #show" do
    login_coach
    it "assigns the requested guardian as @guardian" do
      guardian = Guardian.create! complete_attributes
      get :show, {:id => guardian.to_param}
      expect(assigns(:guardian)).to eq(guardian)
    end
  end

  describe "GET #new" do
    login_coach
    it "assigns a new guardian as @guardian" do
      get :new, {}
      expect(assigns(:guardian)).to be_a_new(Guardian)
    end
  end

  describe "GET #edit" do
    login_coach
    it "assigns the requested guardian as @guardian" do
      guardian = Guardian.create! complete_attributes
      get :edit, {:id => guardian.to_param}
      expect(assigns(:guardian)).to eq(guardian)
    end
  end

  describe "POST #create" do
    login_coach

    context "Creates guardian only" do
      context "with valid params" do
        it "creates a new Guardian" do
          expect {
            post :create, {:guardian => guardian_attributes}
          }.to change(Guardian, :count).by(1)
        end

        it "doesn't create a new Guardian Auth" do
          expect {
            post :create, {:guardian => guardian_attributes}
          }.to change(GuardianAuth, :count).by(0)
        end

        it "assigns a newly created guardian as @guardian" do
          post :create, {:guardian => guardian_attributes}
          expect(assigns(:guardian)).to be_a(Guardian)
          expect(assigns(:guardian)).to be_persisted
        end

        it "redirects to the created guardian" do
          post :create, {:guardian => guardian_attributes}
          expect(response).to redirect_to(Guardian.last)
        end
      end


      context "with invalid params" do
        it "assigns a newly created but unsaved guardian as @guardian" do
          post :create, {:guardian => invalid_attributes}
          expect(assigns(:guardian)).to be_a_new(Guardian)
        end

        it "re-renders the 'new' template" do
          post :create, {:guardian => invalid_attributes}
          expect(response).to render_template("new")
        end
      end
    end

    context "adds a new guardian with guardian auth" do
      context "with valid params" do

        it "creates a new Guardian" do
          expect {
            post :create, {:guardian => complete_attributes}
          }.to change(Guardian, :count).by(1)
        end

        it "creates a new Guardian Auth" do
          expect {
            post :create, {:guardian => complete_attributes}
          }.to change(GuardianAuth, :count).by(1)
        end

        it "assigns a newly created guardian as @guardian" do
          post :create, {:guardian => complete_attributes}
          expect(assigns(:guardian)).to be_a(Guardian)
          expect(assigns(:guardian)).to be_persisted
        end

        it "redirects to the created guardian" do
          post :create, {:guardian => complete_attributes}
          expect(response).to redirect_to(Guardian.last)
        end
      end


      context "with invalid params" do
        it "assigns a newly created but unsaved guardian as @guardian" do
          post :create, {:guardian => invalid_attributes}
          expect(assigns(:guardian)).to be_a_new(Guardian)
        end

        it "re-renders the 'new' template" do
          post :create, {:guardian => invalid_attributes}
          expect(response).to render_template("new")
        end
      end
    end
  end

  describe "PUT #update" do
    login_coach

    let(:new_complete_attributes) {
      {
        name: Faker::Name.name,
        phone: "910000000",
        guardian_auth_attributes: {
          email: Faker::Internet.email
        }
      }
    }

    let(:new_guardian_attributes) {
      {
        name: Faker::Name.name,
        phone: "910000000"
      }
    }

    let(:new_guardian_auth_attributes) {
      {
        guardian_auth_attributes: {
          email: Faker::Internet.email
        }
      }
    }

    context 'only guardian exists' do
      context 'will edit guardian' do
        context "with valid params" do
          it "updates the requested guardian" do
            guardian = Guardian.create! guardian_attributes
            put :update, {:id => guardian.to_param, :guardian => new_guardian_attributes}
            guardian.reload
              expect(guardian.name).to eq(new_guardian_attributes[:name])
          end

          it "assigns the requested guardian as @guardian" do
            guardian = Guardian.create! guardian_attributes
            put :update, {:id => guardian.to_param, :guardian => new_guardian_attributes}
            expect(assigns(:guardian)).to eq(guardian)
          end

          it "redirects to the guardian" do
            guardian = Guardian.create! guardian_attributes
            put :update, {:id => guardian.to_param, :guardian => new_guardian_attributes}
            expect(response).to redirect_to(guardian)
          end
        end

        context "with invalid params" do
          it "assigns the guardian as @guardian" do
            guardian = Guardian.create! guardian_attributes
            put :update, {:id => guardian.to_param, :guardian => invalid_attributes}
            expect(assigns(:guardian)).to eq(guardian)
          end

          it "re-renders the 'edit' template" do
            guardian = Guardian.create! guardian_attributes
            put :update, {:id => guardian.to_param, :guardian => invalid_attributes}
            expect(response).to render_template("edit")
          end
        end
      end

      context 'will add a new guardian auth' do
        context "with valid params" do
          it "updates the guardian" do
            guardian = Guardian.create! guardian_attributes
            put :update, {:id => guardian.to_param, :guardian => new_complete_attributes}
            guardian.reload
              expect(guardian.name).to eq(new_complete_attributes[:name])
          end

          it "assigns the requested guardian as @guardian" do
            guardian = Guardian.create! guardian_attributes
            put :update, {:id => guardian.to_param, :guardian => new_complete_attributes}
            expect(assigns(:guardian)).to eq(guardian)
          end

          it "redirects to the guardian" do
            guardian = Guardian.create! guardian_attributes
            put :update, {:id => guardian.to_param, :guardian => new_complete_attributes}
            expect(response).to redirect_to(guardian)
          end

          it "adds a new guardian auth" do
            guardian = Guardian.create! guardian_attributes
            expect {
              put :update, {:id => guardian.to_param, :guardian => new_complete_attributes}
            }.to change(GuardianAuth, :count).by(1)
          end
        end

        context "with invalid params" do
          it "assigns the guardian as @guardian" do
            guardian = Guardian.create! guardian_attributes
            put :update, {:id => guardian.to_param, :guardian => invalid_attributes}
            expect(assigns(:guardian)).to eq(guardian)
          end

          it "re-renders the 'edit' template" do
            guardian = Guardian.create! guardian_attributes
            put :update, {:id => guardian.to_param, :guardian => invalid_attributes}
            expect(response).to render_template("edit")
          end
        end
      end



    end

    context 'guardian exists with auth' do
      context 'will edit guardian' do
        context "with valid params" do
          it "updates the guardian" do
            guardian = Guardian.create! complete_attributes
            put :update, {:id => guardian.to_param, :guardian => new_complete_attributes}
            guardian.reload
            expect(guardian.name).to eq(new_complete_attributes[:name])
          end

          it "assigns the requested guardian as @guardian" do
            guardian = Guardian.create! complete_attributes
            put :update, {:id => guardian.to_param, :guardian => new_complete_attributes}
            expect(assigns(:guardian)).to eq(guardian)
          end

          it "redirects to the guardian" do
            guardian = Guardian.create! complete_attributes
            put :update, {:id => guardian.to_param, :guardian => new_complete_attributes}
            expect(response).to redirect_to(guardian)
          end

        end
        context "with invalid params" do
          it "assigns the guardian as @guardian" do
            guardian = Guardian.create! complete_attributes
            put :update, {:id => guardian.to_param, :guardian => invalid_attributes}
            expect(assigns(:guardian)).to eq(guardian)
          end

          it "re-renders the 'edit' template" do
            guardian = Guardian.create! complete_attributes
            put :update, {:id => guardian.to_param, :guardian => invalid_attributes}
            expect(response).to render_template("edit")
          end
        end
      end
      context 'will edit guardian auth' do
        context "with valid params" do
          it "updates the guardian auth" do
            guardian = Guardian.create! complete_attributes
            put :update, {:id => guardian.to_param, :guardian => new_guardian_auth_attributes}
            guardian.reload
            expect(guardian.guardian_auth.email).to eq(new_guardian_auth_attributes[:guardian_auth_attributes][:email])
          end

          it "assigns the requested guardian as @guardian" do
            guardian = Guardian.create! complete_attributes
            put :update, {:id => guardian.to_param, :guardian => new_guardian_auth_attributes}
            expect(assigns(:guardian)).to eq(guardian)
          end

          it "redirects to the guardian" do
            guardian = Guardian.create! complete_attributes
            put :update, {:id => guardian.to_param, :guardian => new_guardian_auth_attributes}
            expect(response).to redirect_to(guardian)
          end

        end
        context "with invalid params" do
          it "assigns the guardian as @guardian" do
            guardian = Guardian.create! complete_attributes
            put :update, {:id => guardian.to_param, :guardian => invalid_attributes}
            expect(assigns(:guardian)).to eq(guardian)
          end

          it "re-renders the 'edit' template" do
            guardian = Guardian.create! complete_attributes
            put :update, {:id => guardian.to_param, :guardian => invalid_attributes}
            expect(response).to render_template("edit")
          end
        end
      end

      context 'will edit guardian and guardian auth' do
        context "with valid params" do
          it "updates the guardian" do
            guardian = Guardian.create! complete_attributes
            put :update, {:id => guardian.to_param, :guardian => new_complete_attributes}
            guardian.reload
            expect(guardian.name).to eq(new_complete_attributes[:name])
          end

          it "updates the guardian auth" do
            guardian = Guardian.create! complete_attributes
            put :update, {:id => guardian.to_param, :guardian => new_complete_attributes}
            guardian.reload
            expect(guardian.guardian_auth.email).to eq(new_complete_attributes[:guardian_auth_attributes][:email])
          end

          it "assigns the requested guardian as @guardian" do
            guardian = Guardian.create! complete_attributes
            put :update, {:id => guardian.to_param, :guardian => new_complete_attributes}
            expect(assigns(:guardian)).to eq(guardian)
          end

          it "redirects to the guardian" do
            guardian = Guardian.create! complete_attributes
            put :update, {:id => guardian.to_param, :guardian => new_complete_attributes}
            expect(response).to redirect_to(guardian)
          end

        end
        context "with invalid params" do
          it "assigns the guardian as @guardian" do
            guardian = Guardian.create! complete_attributes
            put :update, {:id => guardian.to_param, :guardian => invalid_attributes}
            expect(assigns(:guardian)).to eq(guardian)
          end

          it "re-renders the 'edit' template" do
            guardian = Guardian.create! complete_attributes
            put :update, {:id => guardian.to_param, :guardian => invalid_attributes}
            expect(response).to render_template("edit")
          end
        end
      end
    end
  end

  describe "DELETE #destroy" do
    login_coach

    it "destroys the requested guardian" do
      guardian = Guardian.create! complete_attributes
      expect {
        delete :destroy, {:id => guardian.to_param}
      }.to change(Guardian, :count).by(-1)
    end

    it "redirects to the guardians list" do
      guardian = Guardian.create! complete_attributes
      delete :destroy, {:id => guardian.to_param}
      expect(response).to redirect_to(guardians_url)
    end
  end

end
