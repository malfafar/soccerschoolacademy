require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe PracticesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Practice. As you add validations to Practice, be sure to
  # adjust the attributes here as well.

  let(:team_season){
    home = Team.create(name: "Home")
    john = Player.create(name: "John", phone: "910000000", birthday: Faker::Time.backward(), zipcode: "5555-444")
    paul = Player.create(name: "Paul", phone: "910000000", birthday: Faker::Time.backward(), zipcode: "5555-444")
    season = Season.create(start_year: 2015, end_year: 2016)

    john_season = PlayerSeason.new
    john_season.player = john
    john_season.save

    paul_season = PlayerSeason.new
    paul_season.player_id = paul.id
    paul_season.save

    home_season = TeamSeason.new

    home_season.player_seasons << john_season
    home_season.player_seasons << paul_season


    home_season.team_id = home.id
    home_season.season_id = season.id
    home_season.save

    return home_season
  }

  let(:valid_attributes) {
    {
      practice_date: Faker::Time.backward(),
      observations: Faker::Lorem.sentence,
      team_season_id: team_season.id
    }
  }

  let(:invalid_attributes) {
    {
      practice_date: nil,
      observations: Faker::Lorem.sentence,
      team_season_id: team_season.id
    }
  }


  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PracticesController. Be sure to keep this updated too.

  describe "GET #index" do

    login_coach

    it "assigns all practices as @practices" do
      practice = Practice.create! valid_attributes
      get :index, {}
      expect(assigns(:practices)).to eq([practice])
    end
  end

  describe "GET #show" do

    login_coach

    it "assigns the requested practice as @practice" do
      practice = Practice.create! valid_attributes
      get :show, {:id => practice.to_param}
      expect(assigns(:practice)).to eq(practice)
    end
  end

  describe "GET #new" do

    login_coach

    it "assigns a new practice as @practice" do
      get :new, {}
      expect(assigns(:practice)).to be_a_new(Practice)
    end
  end

  describe "GET #edit" do
    login_coach
    it "assigns the requested practice as @practice" do
      practice = Practice.create valid_attributes
      get :edit, {:id => practice.to_param}
      expect(assigns(:practice)).to eq(practice)
    end
  end

  describe "POST #create" do

    login_coach

    context "with valid params" do
      it "creates a new Practice" do
        expect {
          post :create, {:practice => valid_attributes}
        }.to change(Practice, :count).by(1)
      end

      it "assigns a newly created practice as @practice" do
        post :create, {:practice => valid_attributes}
        expect(assigns(:practice)).to be_a(Practice)
        expect(assigns(:practice)).to be_persisted
      end

      it "redirects to the created practice" do
        post :create, {:practice => valid_attributes}
        expect(response).to redirect_to(Practice.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved practice as @practice" do
        post :create, {:practice => invalid_attributes}
        expect(assigns(:practice)).to be_a_new(Practice)
      end

      it "re-renders the 'new' template" do
        post :create, {:practice => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do

    login_coach

    context "with valid params" do
      let(:new_attributes) {
        {
          practice_date: Faker::Time.backward(),
          observations: Faker::Lorem.sentence,
          team_season_id: team_season.id
        }
      }

      it "updates the requested practice" do
        practice = Practice.create! valid_attributes
        put :update, {:id => practice.to_param, :practice => new_attributes}
        practice.reload
        expect(practice.observations).to eq(new_attributes[:observations])
      end

      it "assigns the requested practice as @practice" do
        practice = Practice.create! valid_attributes
        put :update, {:id => practice.to_param, :practice => valid_attributes}
        expect(assigns(:practice)).to eq(practice)
      end

      it "redirects to the practice" do
        practice = Practice.create! valid_attributes
        put :update, {:id => practice.to_param, :practice => valid_attributes}
        expect(response).to redirect_to(practice)
      end
    end

    context "with invalid params" do
      it "assigns the practice as @practice" do
        practice = Practice.create! valid_attributes
        put :update, {:id => practice.to_param, :practice => invalid_attributes}
        expect(assigns(:practice)).to eq(practice)
      end

      it "re-renders the 'edit' template" do
        practice = Practice.create! valid_attributes
        put :update, {:id => practice.to_param, :practice => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do

    login_coach


    it "destroys the requested practice" do
      practice = Practice.create! valid_attributes
      expect {
        delete :destroy, {:id => practice.to_param}
      }.to change(Practice, :count).by(-1)
    end

    it "redirects to the practices list" do
      practice = Practice.create! valid_attributes
      delete :destroy, {:id => practice.to_param}
      expect(response).to redirect_to(practices_url)
    end
  end

end
